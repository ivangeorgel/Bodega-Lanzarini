require('dotenv').config(); // para leer variables del .env

const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const mysql = require("mysql2");

const app = express();
const port = process.env.PORT || 3000;

// ‚úÖ Middleware
app.use(bodyParser.json());
app.use(cors());


// ‚úÖ Analizar el host y el puerto si est√°n combinados
let dbHost = process.env.MYSQLHOST || process.env.HOST || 'localhost';
let dbPort = process.env.MYSQLPORT || process.env.DBPORT || 3306;

// Verificar si el host incluye el puerto (formato: host:port)
if (dbHost.includes(':')) {
  const parts = dbHost.split(':');
  dbHost = parts[0];
  dbPort = parseInt(parts[1]);
  console.log("üîÑ Host y puerto separados:", dbHost, dbPort);
}

// Actualizar la configuraci√≥n
const dbConfig = {
  host: dbHost,
  user: process.env.MYSQLUSER || process.env.USER || 'root',
  password: process.env.MYSQLPASSWORD || process.env.PASSWORD || '',
  database: process.env.MYSQL_DATABASE || process.env.DATABASE || 'nombre_base',
  port: dbPort
};



// ‚úÖ Cargar variables de entorno con fallback
// const dbConfig = {
//   host: process.env.MYSQLHOST || process.env.HOST || 'localhost',
//   user: process.env.MYSQLUSER || process.env.USER || 'root',
//   password: process.env.MYSQLPASSWORD || process.env.PASSWORD || '',
//   database: process.env.MYSQL_DATABASE || process.env.DATABASE || 'nombre_base',
//   port: process.env.MYSQLPORT || process.env.DBPORT || 3306
// };

// üåç Mostrar variables de entorno (sin exponer la contrase√±a)
console.log("üìå Verificando variables de entorno:");
console.log("Host:", dbConfig.host);
console.log("User:", dbConfig.user);
console.log("Password:", dbConfig.password ? "‚úÖ Oculta por seguridad" : "‚ùå No definida");
console.log("Database:", dbConfig.database);
console.log("Port:", dbConfig.port);

// ‚úÖ Crear conexi√≥n MySQL
const connection = mysql.createConnection(dbConfig);

// üîß Intentar conectar
connection.connect((err) => {
  if (err) {
    console.error("‚ùå Error al conectar a MySQL:", err.code, err.message);
    return;
  }
  console.log("‚úÖ Conexi√≥n exitosa a MySQL üöÄ");
});

// üåç Ruta de prueba
app.get("/", (req, res) => {
  res.send("Servidor funcionando correctamente üöÄ");
});

// ‚úâÔ∏è Ruta para recibir mensajes del formulario
app.post("/enviar-mensaje", (req, res) => {
  const { nombre, email, mensaje } = req.body;

  if (!nombre || !email || !mensaje) {
    return res.status(400).json({ error: "Todos los campos son obligatorios" });
  }

  const sql = "INSERT INTO contactos (nombre, email, mensaje) VALUES (?, ?, ?)";
  connection.query(sql, [nombre, email, mensaje], (err, result) => {
    if (err) {
      console.error("‚ùå Error al guardar mensaje en la base de datos:", err.message);
      return res.status(500).json({ error: "Error en el servidor" });
    }
    res.status(200).json({ message: "Mensaje enviado correctamente" });
  });
});

// üõë Cerrar conexi√≥n cuando el servidor se apaga
process.on("exit", () => {
  console.log("üõë Cerrando conexi√≥n a MySQL...");
  connection.end();
});



// ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì

app.get("/probar-bd", (req, res) => {
  connection.query("SELECT 1 + 1 AS resultado", (err, results) => {
    if (err) {
      console.error("‚ùå Error al probar conexi√≥n a la BD:", err.message);
      return res.status(500).json({ error: "Error al conectar con la base de datos" });
    }
    res.status(200).json({ message: "Conexi√≥n a la base de datos exitosa üöÄ", resultado: results[0].resultado });
  });
});


// ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì


// üöÄ Iniciar servidor
app.listen(port, () => {
  console.log(`üöÄ Servidor corriendo en http://localhost:${port}`);
});


// Servir archivos est√°ticos desde la carpeta 'public'

app.use(express.static('public'));


// Implementa una ruta para probar la conexi√≥n del formulario:
// Para facilitar la depuraci√≥n, a√±ade una ruta de prueba para tu formulario:
app.get("/probar-formulario", (req, res) => {
  res.status(200).json({ message: "La ruta del formulario est√° funcionando correctamente" });
});